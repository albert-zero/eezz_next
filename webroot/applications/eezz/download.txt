Download need additional functions:
1. extend lark
download: document, files
files   : list of file
file    : 'file' (input=id-of-input-tag, update=id-of-update-tag, type='crypt' or extension)

The result is
    @staticmethod
    def download(item):
        """ Parse 'download' section """
        return {'download': {'document': item[0].children[0],
            'files':[x.children[0] for x in item[1:]}}

html-tag:
data-eezz='{document: ... files:[ .... ]}'
on_event: eezz_download(this)

html-call:
do_download(element)
   json = element.get_attribute(data-eezz)
   send: prepare_download(json.document, json.files)

   do parallel x in files:
      sequence, bytes = read file(x, chunk-size)
      request = {sequence, file-name, update:{element:id, value:100}}
      send: handle_download(request, bytes)

on_ws:message_event()
    updatse(id, percentage)
    id.has_attribute('value') => set_value
    id.class = clzz_progress
    id.set_width = percentage


change-event:
loop-event: for ever
    call-method:
        condition wait for a change
           return

multi-player:
collect input via web-socket
manage owner and send request via http to destination server: request
collect the request data and update browser.




